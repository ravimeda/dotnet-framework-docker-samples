{
  "options": [
    {
      "enabled": false,
      "definition": {
        "id": "a9db38f9-9fdc-478c-b0f9-464221e58316"
      },
      "inputs": {
        "workItemType": "234347",
        "assignToRequestor": "true",
        "additionalFields": "{}"
      }
    },
    {
      "enabled": false,
      "definition": {
        "id": "57578776-4c22-4526-aeb0-86b6da17ee9c"
      },
      "inputs": {}
    },
    {
      "enabled": false,
      "definition": {
        "id": "5d58cc01-7c75-450c-be18-a388ddb129ec"
      },
      "inputs": {
        "branchFilters": "[\"+refs/heads/*\"]",
        "additionalFields": "{}"
      }
    }
  ],
  "variables": {
    "system.debug": {
      "value": "false",
      "allowOverride": true
    },
    "image-builder.imageName": {
      "value": "microsoft/dotnet-buildtools-prereqs:image-builder-nanoserver-20171022184734"
    },
    "image-builder.args": {
      "value": "build --manifest manifest.json --push --username $(PB.docker.username) --password $(PB.docker.password) $(PB.image-builder.customCommonArgs)",
      "allowOverride": true
    },
    "image-builder.containerName": {
      "value": "$(Build.DefinitionName)-$(Build.BuildId)"
    },
    "PB.docker.password": {
      "value": null,
      "isSecret": true
    },
    "PB.image-builder.customCommonArgs": {
      "value": ""
    }
  },
  "demands": [
    "Agent.OS -equals Windows_NT"
  ],
  "retentionRules": [
    {
      "branches": [
        "+refs/heads/*"
      ],
      "artifacts": [],
      "artifactTypesToDelete": [
        "FilePath",
        "SymbolStore"
      ],
      "daysToKeep": 10,
      "minimumToKeep": 1,
      "deleteBuildRecord": true,
      "deleteTestResults": true
    }
  ],
  "_links": {
    "self": {
      "href": "https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_apis/build/Definitions/7927"
    },
    "web": {
      "href": "https://devdiv.visualstudio.com/_permalink/_build/index?collectionId=011b8bdf-6d56-4f87-be0d-0092136884d9&projectId=0bdbc590-a062-4c3f-b0f6-9383f67865ee&definitionId=7927"
    },
    "editor": {
      "href": "https://devdiv.visualstudio.com/_permalink/_build/definitionEditor?collectionId=011b8bdf-6d56-4f87-be0d-0092136884d9&projectId=0bdbc590-a062-4c3f-b0f6-9383f67865ee&definitionId=7927"
    }
  },
  "jobAuthorizationScope": 1,
  "jobTimeoutInMinutes": 60,
  "jobCancelTimeoutInMinutes": 5,
  "process": {
    "phases": [
      {
        "dependencies": [],
        "steps": [
          {
            "environment": {},
            "enabled": true,
            "continueOnError": false,
            "alwaysRun": false,
            "displayName": "Cleanup Docker",
            "timeoutInMinutes": 0,
            "refName": "Task1",
            "task": {
              "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
              "versionSpec": "1.*",
              "definitionType": "task"
            },
            "inputs": {
              "scriptType": "inlineScript",
              "scriptName": "",
              "arguments": "",
              "workingFolder": "",
              "inlineScript": "docker ps -a -q | %{docker rm -f $_}\n\ndocker images | where {-Not ($_.StartsWith(\"microsoft/nanoserver \") -Or $_.StartsWith(\"REPOSITORY \"))} | %{$_.Split(' ', [System.StringSplitOptions]::RemoveEmptyEntries)[2]} | select-object -unique | %{docker rmi -f $_}",
              "failOnStandardError": "true"
            }
          },
          {
            "environment": {},
            "enabled": true,
            "continueOnError": false,
            "alwaysRun": false,
            "displayName": "Pull image-builder",
            "timeoutInMinutes": 0,
            "refName": "Task2",
            "task": {
              "id": "d9bafed4-0b18-4f58-968d-86655b4d2ce9",
              "versionSpec": "1.*",
              "definitionType": "task"
            },
            "inputs": {
              "filename": "docker",
              "arguments": "pull $(image-builder.imageName)",
              "workingFolder": "",
              "failOnStandardError": "false"
            }
          },
          {
            "environment": {},
            "enabled": true,
            "continueOnError": false,
            "alwaysRun": false,
            "displayName": "Create container",
            "timeoutInMinutes": 0,
            "refName": "Task3",
            "task": {
              "id": "d9bafed4-0b18-4f58-968d-86655b4d2ce9",
              "versionSpec": "1.*",
              "definitionType": "task"
            },
            "inputs": {
              "filename": "docker",
              "arguments": "create --name $(image-builder.containerName) $(image-builder.imageName)",
              "workingFolder": "",
              "failOnStandardError": "false"
            }
          },
          {
            "environment": {},
            "enabled": true,
            "continueOnError": false,
            "alwaysRun": false,
            "displayName": "Copy image-builder locally",
            "timeoutInMinutes": 0,
            "refName": "Task4",
            "task": {
              "id": "d9bafed4-0b18-4f58-968d-86655b4d2ce9",
              "versionSpec": "1.*",
              "definitionType": "task"
            },
            "inputs": {
              "filename": "docker ",
              "arguments": "cp $(image-builder.containerName):/image-builder $(Build.BinariesDirectory)/Microsoft.DotNet.ImageBuilder",
              "workingFolder": "",
              "failOnStandardError": "false"
            }
          },
          {
            "environment": {},
            "enabled": true,
            "continueOnError": false,
            "alwaysRun": false,
            "displayName": "Cleanup container",
            "timeoutInMinutes": 0,
            "refName": "Task5",
            "task": {
              "id": "d9bafed4-0b18-4f58-968d-86655b4d2ce9",
              "versionSpec": "1.*",
              "definitionType": "task"
            },
            "inputs": {
              "filename": "docker",
              "arguments": "rmi -f $(image-builder.imageName)",
              "workingFolder": "",
              "failOnStandardError": "false"
            }
          },
          {
            "environment": {},
            "enabled": true,
            "continueOnError": false,
            "alwaysRun": false,
            "displayName": "Run image-builder",
            "timeoutInMinutes": 0,
            "refName": "Task6",
            "task": {
              "id": "d9bafed4-0b18-4f58-968d-86655b4d2ce9",
              "versionSpec": "1.*",
              "definitionType": "task"
            },
            "inputs": {
              "filename": "$(Build.BinariesDirectory)/Microsoft.DotNet.ImageBuilder/Microsoft.DotNet.ImageBuilder.exe",
              "arguments": "$(image-builder.args)",
              "workingFolder": "",
              "failOnStandardError": "false"
            }
          },
          {
            "environment": {},
            "enabled": true,
            "continueOnError": true,
            "alwaysRun": false,
            "displayName": "Cleanup Docker",
            "timeoutInMinutes": 0,
            "refName": "Task7",
            "task": {
              "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
              "versionSpec": "1.*",
              "definitionType": "task"
            },
            "inputs": {
              "scriptType": "inlineScript",
              "scriptName": "",
              "arguments": "",
              "workingFolder": "",
              "inlineScript": "docker ps -a -q | %{docker rm -f $_}\n\ndocker images | where {-Not ($_.StartsWith(\"microsoft/nanoserver \") -Or $_.StartsWith(\"REPOSITORY \"))} | %{$_.Split(' ', [System.StringSplitOptions]::RemoveEmptyEntries)[2]} | select-object -unique | %{docker rmi -f $_}",
              "failOnStandardError": "true"
            }
          }
        ],
        "variables": {},
        "name": "Phase 1",
        "target": {
          "demands": [],
          "executionOptions": {
            "type": 0
          },
          "allowScriptsAuthAccessOption": false,
          "type": 1
        },
        "jobAuthorizationScope": "projectCollection",
        "jobCancelTimeoutInMinutes": 1
      }
    ],
    "type": 1
  },
  "repository": {
    "properties": {
      "cleanOptions": "3",
      "gitLfsSupport": "false",
      "skipSyncSource": "false",
      "reportBuildStatus": "true",
      "fetchDepth": "0",
      "connectedServiceId": "a022e705-88df-44f2-a23a-53212a14f474",
      "apiUrl": "https://api.github.com/repos/rakeshsinghranchi/dotnet-framework-docker-samples",
      "branchesUrl": "https://api.github.com/repos/rakeshsinghranchi/dotnet-framework-docker-samples/branches",
      "cloneUrl": "https://github.com/rakeshsinghranchi/dotnet-framework-docker-samples.git",
      "refsUrl": "https://api.github.com/repos/rakeshsinghranchi/dotnet-framework-docker-samples/git/refs",
      "checkoutNestedSubmodules": "false"
    },
    "id": "https://github.com/rakeshsinghranchi/dotnet-framework-docker-samples.git",
    "type": "GitHub",
    "name": "rakeshsinghranchi/dotnet-framework-docker-samples",
    "url": "https://github.com/rakeshsinghranchi/dotnet-framework-docker-samples.git",
    "defaultBranch": "EnableBuildPipeline",
    "clean": "false",
    "checkoutSubmodules": false
  },
  "processParameters": {},
  "quality": "definition",
  "authoredBy": {
    "id": "6af2d883-13d1-4b15-8765-c98f7a53b9e0",
    "displayName": "Rakesh Ranjan Singh",
    "uniqueName": "raksingh@microsoft.com",
    "url": "https://app.vssps.visualstudio.com/Aa44b2c06-f247-425c-8464-4a0676af910a/_apis/Identities/6af2d883-13d1-4b15-8765-c98f7a53b9e0",
    "imageUrl": "https://devdiv.visualstudio.com/_api/_common/identityImage?id=6af2d883-13d1-4b15-8765-c98f7a53b9e0"
  },
  "drafts": [],
  "queue": {
    "id": 330,
    "name": "DotNetCore-Build",
    "pool": {
      "id": 97,
      "name": "DotNetCore-Build"
    }
  },
  "id": 7927,
  "name": "dotnet-framework-docker-samples-windows-amd64-images",
  "url": "https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_apis/build/Definitions/7927",
  "uri": "vstfs:///Build/Definition/7927",
  "path": "\\For-Testing",
  "type": "build",
  "queueStatus": 0,
  "revision": 3,
  "createdDate": "2017-11-19T05:19:06.643Z",
  "project": {
    "id": "0bdbc590-a062-4c3f-b0f6-9383f67865ee",
    "name": "DevDiv",
    "description": "Visual Studio and DevDiv team project for git source code repositories.  Work items will be added for Adams, Dev14 work items are tracked in vstfdevdiv.  ",
    "url": "https://devdiv.visualstudio.com/_apis/projects/0bdbc590-a062-4c3f-b0f6-9383f67865ee",
    "state": "wellFormed",
    "revision": 418098369,
    "visibility": "organization"
  }
}